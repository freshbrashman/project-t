# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Task(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, task_id: int=None, title: str=None, content: str=None, status: str=None):  # noqa: E501
        """Task - a model defined in Swagger

        :param task_id: The task_id of this Task.  # noqa: E501
        :type task_id: int
        :param title: The title of this Task.  # noqa: E501
        :type title: str
        :param content: The content of this Task.  # noqa: E501
        :type content: str
        :param status: The status of this Task.  # noqa: E501
        :type status: str
        """
        self.swagger_types = {
            'task_id': int,
            'title': str,
            'content': str,
            'status': str
        }

        self.attribute_map = {
            'task_id': 'taskId',
            'title': 'title',
            'content': 'content',
            'status': 'status'
        }

        self._task_id = task_id
        self._title = title
        self._content = content
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> 'Task':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Task of this Task.  # noqa: E501
        :rtype: Task
        """
        return util.deserialize_model(dikt, cls)

    @property
    def task_id(self) -> int:
        """Gets the task_id of this Task.


        :return: The task_id of this Task.
        :rtype: int
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id: int):
        """Sets the task_id of this Task.


        :param task_id: The task_id of this Task.
        :type task_id: int
        """

        self._task_id = task_id

    @property
    def title(self) -> str:
        """Gets the title of this Task.


        :return: The title of this Task.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this Task.


        :param title: The title of this Task.
        :type title: str
        """

        self._title = title

    @property
    def content(self) -> str:
        """Gets the content of this Task.


        :return: The content of this Task.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content: str):
        """Sets the content of this Task.


        :param content: The content of this Task.
        :type content: str
        """

        self._content = content

    @property
    def status(self) -> str:
        """Gets the status of this Task.

        task status  # noqa: E501

        :return: The status of this Task.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this Task.

        task status  # noqa: E501

        :param status: The status of this Task.
        :type status: str
        """
        allowed_values = ["available", "pending", "sold"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
